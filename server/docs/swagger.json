{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Water tracker app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of waterToday tracker app"
  },
  "servers": [
    {
      "url": "https://projectwatertrackerteam4.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "User operations."
    },
    {
      "name": "Water",
      "description": "Water operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register new user",
        "description": "This endpoint creates a new user.",
        "operationId": "signupUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email.",
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@mail.com"
                  },
                  "password": {
                    "description": "User's password.",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "P@ssword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify user's account",
        "description": "This endpoint verifies a user account via a token and redirects to the success page.",
        "operationId": "verifyAccount",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Verification token sent to the user.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account verified successfully, user is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Account verified successfully! User is being redirected."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "description": "Authenticate a user and return an access token along with user details.",
        "operationId": "loginUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "format": "password",
                    "example": "StrongP@ssw0rd"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout the user",
        "description": "Logs out the user and clears the session",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out, session cleared"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "description": "Refreshes the user's session using the refresh token from cookies.",
        "operationId": "refreshUserSession",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The new access token."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send a password reset email",
        "description": "Sends a password reset email to the user with a reset link.",
        "operationId": "requestResetEmail",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user requesting the password reset."
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email has been successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "description": "Allows the user to reset their password using a valid reset token.",
        "operationId": "resetPassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "description": "The new password for the user."
                  },
                  "token": {
                    "type": "string",
                    "description": "The reset token sent to the user's email for resetting the password."
                  }
                },
                "required": [
                  "password",
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been successfully reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "description": "Returns the Google OAuth URL that the user can visit to authenticate via Google.",
        "operationId": "getGoogleOAuthUrl",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved Google OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "Retrieve the details of the currently authenticated user.",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/user"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "1234567890abcdef12345678"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "user@example.com"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "John Doe"
                                },
                                "gender": {
                                  "type": "string",
                                  "enum": [
                                    "female",
                                    "male"
                                  ],
                                  "example": "female"
                                },
                                "dailyNorma": {
                                  "type": "number",
                                  "example": 2000
                                },
                                "avatarUrl": {
                                  "type": "string",
                                  "example": "https://res.cloudinary.com/demo/image/upload/v1616161616/sample.jpg"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user information",
        "description": "Allows updating fields such as name, email, password, gender, daily norm, and avatar.",
        "operationId": "updateUserInfo",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 32,
                    "example": "Jane Doe"
                  },
                  "email": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+.[a-zA-Z]{2,}$",
                    "example": "jane.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "StrongPassword123!"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "female",
                      "male"
                    ],
                    "default": "female",
                    "example": "female"
                  },
                  "dailyNorma": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 15000,
                    "default": 2000,
                    "example": 2000
                  },
                  "avatarUrl": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://res.cloudinary.com/demo/image/upload/v1616161616/sample.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User information updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "description": "Update the avatar of the currently authenticated user. Requires the user to upload an image file.",
        "operationId": "updateUserAvatar",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatarUrl": {
                    "type": "string",
                    "format": "binary",
                    "description": "The avatar image file to be uploaded."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user avatar"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "avatarUrl": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://res.cloudinary.com/demo/image/upload/v1616161616/sample.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/day/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get waterToday records by day",
        "description": "This endpoint retrieves waterToday records for a given date.",
        "operationId": "getWaterByDate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "description": "The date for which to retrieve the waterToday records (ISO format YYYY-MM-DD).",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2024-12-16"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the waterToday records for the given date.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found waterToday records by this date."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "waterRecords",
                        "currentDailyNorma",
                        "recordsCount",
                        "totalDayWater",
                        "percentage"
                      ],
                      "properties": {
                        "waterRecords": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "_id",
                              "userId",
                              "date",
                              "amount"
                            ],
                            "properties": {
                              "_id": {
                                "type": "string",
                                "description": "Unique identifier for the waterToday record.",
                                "example": "64f5b992c4b3f1567e63a179"
                              },
                              "userId": {
                                "type": "string",
                                "description": "ID of the user who logged the waterToday record.",
                                "example": "64f5b992c4b3f1567e63a178"
                              },
                              "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The date and time of the waterToday consumption record.",
                                "example": "2024-12-16T08:30:00Z"
                              },
                              "amount": {
                                "type": "number",
                                "description": "The amount of waterToday consumed (in milliliters).",
                                "example": 300
                              }
                            }
                          }
                        },
                        "currentDailyNorma": {
                          "type": "integer",
                          "description": "The user's daily water consumption goal (in milliliters).",
                          "example": 2000
                        },
                        "recordsCount": {
                          "type": "integer",
                          "description": "The number of records found for the given date.",
                          "example": 3
                        },
                        "totalDayWater": {
                          "type": "number",
                          "description": "The total amount of waterToday consumed for the given date (in milliliters).",
                          "example": 900
                        },
                        "percentage": {
                          "type": "integer",
                          "description": "The percentage of the daily waterToday consumption norm met for the given date.",
                          "example": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "No records found for the given date.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add waterToday record",
        "description": "This endpoint creates a new waterToday record for registered user",
        "operationId": "postWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "amount"
                ],
                "properties": {
                  "date": {
                    "description": "The date and time of the waterToday consumption record.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-16T08:30:00Z"
                  },
                  "amount": {
                    "description": "The amount of waterToday consumed (in milliliters).",
                    "type": "number",
                    "minimum": 50,
                    "maximum": 5000,
                    "example": 250
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully added the waterToday record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data",
                    "accessToken"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added the waterToday record."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "userId",
                        "date",
                        "amount"
                      ],
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "Unique identifier for the waterToday record.",
                          "example": "64f5b992c4b3f1567e63a179"
                        },
                        "userId": {
                          "type": "string",
                          "description": "ID of the user who logged the waterToday record.",
                          "example": "64f5b992c4b3f1567e63a178"
                        },
                        "date": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date and time of the waterToday consumption record.",
                          "example": "2024-12-16T08:30:00Z"
                        },
                        "amount": {
                          "type": "number",
                          "description": "The amount of waterToday consumed (in milliliters).",
                          "example": 250
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update waterToday record by ID",
        "description": "This endpoint updates an existing waterToday record for the user.",
        "operationId": "patchWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the waterToday record to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "64f5b992c4b3f1567e63a179"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The updated date and time of the waterToday consumption record.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-12-16T09:00:00Z"
                  },
                  "amount": {
                    "description": "The updated amount of waterToday consumed (in milliliters).",
                    "type": "number",
                    "minimum": 50,
                    "maximum": 5000,
                    "example": 300
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the waterToday record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the waterToday record."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "userId",
                        "date",
                        "amount"
                      ],
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "Unique identifier for the waterToday record.",
                          "example": "64f5b992c4b3f1567e63a179"
                        },
                        "userId": {
                          "type": "string",
                          "description": "ID of the user who logged the waterToday record.",
                          "example": "64f5b992c4b3f1567e63a178"
                        },
                        "date": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The updated date and time of the waterToday consumption record.",
                          "example": "2024-12-16T09:00:00Z"
                        },
                        "amount": {
                          "type": "number",
                          "description": "The updated amount of waterToday consumed (in milliliters).",
                          "example": 300
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Water record not found.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete waterToday record",
        "description": "This endpoint deletes an existing waterToday record for the user by ID.",
        "operationId": "deleteWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the waterToday record to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "64f5b992c4b3f1567e63a179"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the waterToday record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "_id"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully deleted the waterToday record."
                    },
                    "_id": {
                      "type": "string",
                      "example": "64f5b992c4b3f1567e63a179"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Water record not found.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/{month}/{year}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get waterToday consumption by month",
        "description": "Retrieves the waterToday consumption data for each day of a specified month.",
        "operationId": "getWaterConsumptionByMonth",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "description": "The month for which to retrieve waterToday consumption data (1-12).",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 12,
              "example": 12
            }
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year for which to retrieve waterToday consumption data.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2024
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved waterToday consumption data for the month.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/water"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "No records found for the given date.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/userNormaHistory": {
      "put": {
        "tags": [
          "Water"
        ],
        "summary": "Upsert user daily norm history",
        "description": "Insert or update the user's daily norm history for the current day. The date is automatically set to today's date.",
        "operationId": "upsertUserNormaHistory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNormaHistory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user norm history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully upserted user's history"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date",
                          "description": "The date of the norma history entry.",
                          "example": "2024-12-22"
                        },
                        "dailyNorma": {
                          "type": "number",
                          "description": "The daily norma value.",
                          "example": 2000
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Successfully created user norm history entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully upserted user's history"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "1234567890abcdef12345678"
                        },
                        "date": {
                          "type": "string",
                          "format": "date",
                          "example": "2024-12-19"
                        },
                        "dailyNorma": {
                          "type": "integer",
                          "example": 2000
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "email",
          "password",
          "verify",
          "gender"
        ],
        "properties": {
          "_id": {
            "description": "User's unique identifier",
            "type": "string",
            "example": "64f5b992c4b3f1567e63a178"
          },
          "email": {
            "description": "User's email address",
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "description": "User's password",
            "type": "string",
            "minLength": 8,
            "maxLength": 64,
            "pattern": "^(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])",
            "example": "password123"
          },
          "verify": {
            "description": "Indicates if the user is verified",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "maxLength": 32,
            "example": "John Doe"
          },
          "gender": {
            "description": "User's gender",
            "type": "string",
            "enum": [
              "female",
              "male"
            ],
            "default": "female",
            "example": "female"
          },
          "dailyNorm": {
            "description": "User's daily norm value",
            "type": "number",
            "default": 2000,
            "minimum": 1,
            "maximum": 15000,
            "example": 2000
          },
          "avatarUrl": {
            "description": "URL of the user's avatar image",
            "type": "string",
            "default": "",
            "example": "https://example.com/avatar.jpg"
          },
          "createdAt": {
            "description": "Timestamp when the user was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-10-22T12:34:56Z"
          },
          "updatedAt": {
            "description": "Timestamp when the user was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2023-11-01T14:22:11Z"
          }
        }
      },
      "water": {
        "type": "object",
        "required": [
          "date",
          "amount",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Water record's unique identifier",
            "type": "string",
            "example": "64f5b992c4b3f1567e63a179"
          },
          "userId": {
            "description": "ID of the user associated with the waterToday record",
            "type": "string",
            "example": "64f5b992c4b3f1567e63a178"
          },
          "date": {
            "description": "The date and time of the waterToday consumption record",
            "type": "string",
            "format": "date-time",
            "example": "2024-12-16T08:30:00Z"
          },
          "amount": {
            "description": "The amount of waterToday consumed (in milliliters)",
            "type": "number",
            "minimum": 50,
            "maximum": 5000,
            "example": 250
          },
          "currentDailyNorm": {
            "description": "User's daily waterToday consumption norm (in milliliters)",
            "type": "number",
            "default": 2000,
            "minimum": 500,
            "example": 2000
          },
          "createdAt": {
            "description": "Timestamp when the waterToday record was created",
            "type": "string",
            "format": "date-time",
            "example": "2024-12-16T08:31:00Z"
          },
          "updatedAt": {
            "description": "Timestamp when the waterToday record was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2024-12-16T10:15:00Z"
          }
        }
      },
      "UserNormaHistory": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of the user's daily norm entry.",
            "example": "2024-12-19"
          },
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user.",
            "example": "1234567890abcdef12345678"
          },
          "dailyNorma": {
            "type": "integer",
            "description": "The user's daily norm value.",
            "default": 2000,
            "example": 2000
          }
        },
        "required": [
          "date",
          "userId"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request - Validation Error or Incorrect Input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Validation Error! Invalid request body or parameters."
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The requested resource was not found!"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict - Email already in use",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP status code indicating a conflict",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "Explanation of the conflict",
                  "example": "Email in use!"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "error"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "error": {
                  "type": "string",
                  "description": "Detailed error message for debugging purposes.",
                  "example": "Unexpected database error occurred"
                }
              }
            }
          }
        }
      }
    }
  }
}